"""
    Copyright 2013 KU Leuven Research and Development - iMinds - Distrinet

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Administrative Contact: dnet-project-office@cs.kuleuven.be
    Technical Contact: arnaud.schoonjans@student.kuleuven.be
"""

entity Cluster:
	"""
	    A riak cluster consists of multiple servers
	"""
end

entity Riak extends ip::services::Server:

end

Cluster cluster [0:1] -- [1:] Riak servers

implementation riakServer:
	# Install dependencies with Erlang
	dep1 = std::Package(name = "gcc", host = self.host, state="installed")
    	dep2 = std::Package(name = "glibc-devel", host = self.host, state="installed")
	dep3 = std::Package(name = "make", host = self.host, state="installed")
	dep4 = std::Package(name = "ncurses-devel", host = self.host, state="installed")
	dep5 = std::Package(name = "openssl-devel", host = self.host, state="installed")
	dep6 = std::Package(name = "autoconf", host = self.host, state="installed")

	# Install Erlang
	erl = std::Package(name = "erlang", host = self.host, state="installed", requires= [dep1,dep2,dep3,dep4,dep5,dep6])

	# Install Riak
	ri = std::Package(name = "riak", host = self.host, state="installed", requires=[erl])

	# Configure app.config file
	appconfig = std::ConfigFile(path = "/etc/riak/app.config", content = template("riak/app.config.tmpl"), 
	host = self.host, requires = [ri], reload = true)

	# Configure vm.args file
	vmargs = std::ConfigFile(path = "/etc/riak/vm.args", content = template("riak/vm.args.tmpl"), host = self.host, requires = [ri], reload = true)

	# Start riak as serivce at boot
	srv = std::Service(name = "riak", state = "running", onboot = true, requires = [ri,vmargs,appconfig], host = self.host)

	# Write file with cluster members
	member_file = std::ConfigFile(path = "/etc/sysconfig/riak", reload=true, content = template("riak/nodes_in_ring.tmpl"), 
	host = self.host, requires = [ri,vmargs,appconfig])

	# Write unit file (cluster membership service)
	unit_file = std::File(host = self.host, path = "/lib/systemd/system/update_riak_nodes.service", owner = "root", 
	group = "root", mode = 644, requires = [ri, vmargs, appconfig], content = file("riak/update_riak_nodes.service"))

	# Write script of cluster membership service
	script_file = std::File(host = self.host, path = "/usr/bin/update_riak_nodes", owner = "root", group = "root", mode = 755, 
	content = file("riak/update_riak_nodes"), requires=[ri, vmargs, appconfig])

	# Add cluster membership service
	service_file = std::Service(host = self.host, name = "update_riak_nodes", state = "running", onboot = true, 
	requires = [unit_file, script_file, member_file])
end

implement Riak using riakServer
implement Cluster using std::none
