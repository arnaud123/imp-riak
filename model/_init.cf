"""
    Copyright 2013 KU Leuven Research and Development - iMinds - Distrinet

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Administrative Contact: dnet-project-office@cs.kuleuven.be
    Technical Contact: bart.vanbrabant@cs.kuleuven.be
"""

entity Riak extends ip::services::Server:

end

implementation riakServer:
	# Install dependencies with Erlang
	dep1 = std::Package(name = "gcc", host = self.host, state="installed")
    	dep2 = std::Package(name = "glibc-devel", host = self.host, state="installed")
	dep3 = std::Package(name = "make", host = self.host, state="installed")
	dep4 = std::Package(name = "ncurses-devel", host = self.host, state="installed")
	dep5 = std::Package(name = "openssl-devel", host = self.host, state="installed")
	dep6 = std::Package(name = "autoconf", host = self.host, state="installed")
	# Install Erlang
	erl = std::Package(name = "erlang", host = self.host, state="installed", requires= [dep1,dep2,dep3,dep4,dep5,dep6])
	# Install Riak
	ri = std::Package(name = "riak", host = self.host, state="installed", requires=[dep1,dep2,dep3,dep4,dep5,dep6,erl])
	# Configure app.config file
	appconfig = std::ConfigFile(path = "/etc/riak/app.config", content = template("riak/app.config.tmpl"), host = self.host, requires = [dep1,dep2,dep3,dep4,dep5,dep6,erl,ri], reload = true)
	# Configure vm.args file
	vmargs = std::ConfigFile(path = "/etc/riak/vm.args", content = template("riak/vm.args.tmpl"), host = self.host, requires = [dep1,dep2,dep3,dep4,dep5,dep6,erl,ri], reload = true)
	# Riak als service opstarten bij boot
	srv = std::Service(name = "riak", state = "running", onboot = true, requires = [dep1,dep2,dep3,dep4,dep5,dep6,erl,ri,vmargs,appconfig], host = self.host)
end

implement Riak using riakServer

#TODO: Change shell van riak user, aan elkaar koppelen van de installaties,ulimit instellen
